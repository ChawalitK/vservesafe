
(function (w) {
    /*tagconfig*/
    var config =

{"autoPlay":true,"posSelectors":[{"selector":"[itemprop=articleBody]"}],"showBigPrevNextOnPause":true,"playerType":2,"playerDelay":0,"showReplay":true,"readMoreButton":{"showWhen":"ui-visible","text":"Read More","enable":true},"showBigPlay":true,"showPlaylistItemTitle":true,"targetingDomain":"","templateId":"647476f2df144a0a1f0301e6","tracking":{"enabled":false},"customCss":"{ font-family: 'KaLaTeXa Display' !important; }\navp-read-more-button {\n  color: rgb(0, 180, 0);\n  border: 1.5px solid rgb(0, 180, 0);\n  border-radius: 8px;\n  background: rgb(255, 255, 255);\n  font-size: 12px;\n}\navp-read-more-button a {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}","checkTargeting":false,"autoContinue":true,"timelineMode":"bottom","scriptId":"AV647476f338339c653d0fc474","playlistPlacement":1,"tagId":"647476f338339c653d0fc474","adServerDomain":"go1.aniview.com","mobile":{"showPrevButton":true,"showNextButton":true,"showBigPrevNext":true,"showBigPlay":true,"showBigPlayOnPause":true,"showPauseButton":true,"showFullScreen":true},"floating":{"closeButton":true,"floatOnBottom":true,"floatOnView":true,"size":0.5,"bottom":10,"resize":true,"position":"Bottom-Right","right":10},"showSoundButton":true,"width":100,"height":0,"showPlaylist":false,"playerVersion":8,"autoLoop":true,"showPauseButton":true,"posDfp1x1":false,"showPrevButton":true,"showNextButton":true,"showBigPrevNext":true,"showVolumeControl":true,"showTitle":"left","content":{"commonSlots":[{"time":0,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":2,"nextAdTimeout":8},{"time":7,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8},{"time":14,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8},{"time":19,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8}],"order":1,"breakingAds":7,"randomFrom":0,"contents":{},"type":1,"firstPrerollSlot":{"time":0,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":2,"nextAdTimeout":8},"cmsId":"647475a75ccd0f37250e6a42","cmsType":"carousel","breakingAdsMode":"op"},"showPlaylistButton":true,"startMode":{"showPlayer":true,"playOnView":true,"mode":"WaitForAd"},"adConfig":{"soundButton":true,"pauseButton":true,"skip":true,"logo":false,"channelId":"63e4ae42e02e4c528c005da6","errorLimit":30,"adsControlPositioning":"left","vastRetry":5,"skipTimer":5,"skipText":"Skip","startAdOnView":true,"reqTabOnView":true,"timelineMode":"bottom","vitab":true,"startAdOnViewPerc":20,"width":100,"publisherId":"63d7c9776e1209467d04b4d3","height":0},"autoSkip":{"timeout":5,"time":20},"startVolume":0,"showDuration":true,"moveXSec":true,"showFullScreen":true,"closeButtonStyle":{"position":"Top-Right","outside":true},"showBigPlayOnPause":true,"position":"aniplayer_AV647476f338339c653d0fc474","posType":"after"}
var b =
[{"a":{"autoPlay":true,"showBigPrevNextOnPause":true,"playerType":2,"playerDelay":0,"showReplay":true,"readMoreButton":{"showWhen":"ui-visible","text":"Read More","enable":true},"posCounter":1,"showBigPlay":true,"posSelector":"[itemprop=articleBody]","showPlaylistItemTitle":true,"targetingDomain":"","templateId":"647476f2cd466671e1029b54","tracking":{"enabled":false},"customCss":"{ font-family: 'KaLaTeXa Display' !important; }\navp-read-more-button {\n  color: rgb(0, 180, 0);\n  border: 1.5px solid rgb(0, 180, 0);\n  border-radius: 8px;\n  background: rgb(255, 255, 255);\n  font-size: 12px;\n}\navp-read-more-button a {\n  padding-top: 8px;\n  padding-bottom: 8px;\n}","checkTargeting":false,"autoContinue":true,"timelineMode":"bottom","scriptId":"AV647476f338339c653d0fc474","playlistPlacement":1,"tagId":"647476f338339c653d0fc474","adServerDomain":"go1.aniview.com","mobile":{"showPrevButton":true,"showNextButton":true,"showBigPrevNext":true,"showBigPlay":true,"showBigPlayOnPause":true,"showPauseButton":true,"showFullScreen":true},"floating":{"width":180,"right":10,"floatOnView":true,"size":1,"bottom":120,"resize":true,"height":101,"floatOnBottom":true,"position":"Bottom-Right","closeButton":true},"showSoundButton":true,"width":100,"height":0,"showPlaylist":false,"playerVersion":8,"autoLoop":true,"showPauseButton":true,"posDfp1x1":false,"showPrevButton":true,"showNextButton":true,"showBigPrevNext":true,"showVolumeControl":true,"showTitle":"left","content":{"commonSlots":[{"time":0,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":2,"nextAdTimeout":8},{"time":7,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8},{"time":14,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8},{"time":19,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":1,"nextAdTimeout":8}],"order":1,"breakingAds":7,"randomFrom":0,"contents":{},"type":1,"firstPrerollSlot":{"time":0,"firstAdTimeOut":15,"preloadAdTime":5,"maxAds":2,"nextAdTimeout":8},"cmsId":"647475a75ccd0f37250e6a42","cmsType":"carousel","breakingAdsMode":"op"},"showPlaylistButton":true,"startMode":{"showPlayer":true,"playOnView":true,"mode":"WaitForAd"},"adConfig":{"soundButton":true,"pauseButton":true,"skip":true,"logo":false,"channelId":"63e4ae42e02e4c528c005da6","errorLimit":30,"adsControlPositioning":"left","vastRetry":8,"skipTimer":5,"skipText":"Skip","startAdOnView":true,"reqTabOnView":true,"timelineMode":"bottom","vitab":true,"startAdOnViewPerc":20,"width":100,"publisherId":"63d7c9776e1209467d04b4d3","height":0},"autoSkip":{"timeout":5,"time":20},"startVolume":0,"showDuration":true,"moveXSec":true,"showFullScreen":true,"closeButtonStyle":{"position":"Top-Right","outside":true},"showBigPlayOnPause":true,"position":"aniplayer_AV647476f338339c653d0fc474","posType":"after"},"t":{"p":1},"sp":0}]
var ab =
{}


    /*tagconfig*/
    var a = config;
    var st = {
        target: function () {
            try {if (this.sp) {
                return
            }
            var ua = navigator.userAgent || navigator.vendor || window.opera;
            var uav = navigator.appVersion ? navigator.appVersion.toLowerCase() : "";
            var op = 2;
            var isTablet = /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/i.test(ua);
            if (isTablet && a.tabletAsDesktop) {

            } else if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(ua.substr(0, 4))) {
                op = 1;
            } else {
                if (/web0s|webos|tizen/i.test(uav)) {
                    op = 4;
                }
            }
            this.op = op;} catch (reason) {(console.error || console.log)(reason);}
        },
        getConfig: function () {
            try {            function getRC(ab) {
                if (ab && ab.length) {
                    var inc = 0;
                    var rand = Math.floor(Math.random() * 100) + 1;
                    for (i = 0; i < ab.length; i++) {
                        b1 = ab[i];
                        inc += b1.sp;
                        if (b1.a && inc >= rand) {
                            return b1.a;
                        }
                    }
                }
            }

            function merge(target, source) {
                if (typeof source !== 'object' || Array.isArray(source)) return target;
                for (var key in source) {
                    var a = {};
                    a[key] = {};
                    if (typeof source[key] === 'object' && !Array.isArray(source[key])) {
                        if (!target[key]) Object.assign(target, a);
                        merge(target[key], source[key]);
                    } else {
                        a[key] = source[key]
                        Object.assign(target, a);
                    }
                }
            }

            var cfg = config;
            try {
                var i, b1, b1a;
                if (b && b.length > 0) {
                    st.target();
                    for (i = 0; i < b.length; i++) {
                        b1 = b[i];
                        if (b1.t && b1.t.p
                            && b1.t.p == this.op && b1.a) {
                            b1a = b1.a;
                            break;
                        }
                    }
                }

                var r1 = b1a || getRC(ab) || cfg;
                if (typeof ad !== 'undefined' && ad.length > 0) {
                    var r2 = getRC(ad);
                    merge(r1, r2);
                }
                return r1;
            } catch (e) {

            }

            return cfg;} catch (reason) {(console.error || console.log)(reason);}
        },
        track: function(e, m) {
            try {    if (!this.trackUrl) {
                        this.trackUrl = "https://" + (a.trackDomain || "track1.aniview.com") + "/track?pid=" + a.adConfig.publisherId + "&cid=" + a.adConfig.channelId + "&cb=" + Date.now() + "&r=" + location.host + "&stagid=" + (a.tagId || "") + "&stplid=" + (a.templateId || "") + "&d35=" + (a.adConfig.sabTest || "") + "&d65=" + (a.adConfig.nabTest || "") + "&d66=" + (a.playerVersion || "") + "&d74=" + (a.sessionID || "") + "&e=";
                  }
                  m = m ? m : "";
                  (new Image()).src = this.trackUrl + e + m;
                  } catch (reason) {(console.error || console.log)(reason);}
        },
        playerLoadedTrackParams: function() {
            try {        var params = "";

        if (config.hasOwnProperty('content') &&
            config.content.hasOwnProperty('cmsType') &&
            config.content.hasOwnProperty('cmsId')
        ) {
            if (a.content.cmsType === 'playlist') {
                params += "&cpid=" + a.content.cmsId;
            } else if (a.content.cmsType === 'video') {
                params += "&cvid=" + a.content.cmsId;
            }
        }

        var playReason = 'interaction';
        if (config.playOnView) {
            playReason = 'viewable'
        } else if (config.autoPlay) {
            playReason = 'autostart'
        }

        params += "&str=" + playReason;

        return params;
    } catch (reason) {(console.error || console.log)(reason);}
        },
        unique: function() {
            try {if (!this.win.aniplayerPos)
                this.win.aniplayerPos = {};
            this.win.aniplayerPos[a.position] = true;
            return true;} catch (reason) {(console.error || console.log)(reason);}
        },
        findWin: function() {
           try {try {
        try {
            var hasSelector = a.posSelector || a.posSelectors && a.posSelectors.length > 0;
            if ((!a.posDfp1x1 && !a.posClass && !hasSelector && !a.posId && !a.posTag) || (w === top) || !w.frameElement) {
                this.doc = document;
                this.win = w;
            } else if (a.posDfp1x1 && w.frameElement) {
                this.win = parent;
                this.doc = parent.document;
            } else {
                this.win = top;
                this.doc = top.document;
            }
        } catch (f) {
            this.doc = document;
            this.win = w;
        }
    } catch (reason) {
        (console.error || console.log)(reason);
    }} catch (reason) {(console.error || console.log)(reason);}
        },
        postCreate: function() {
            try {} catch (reason) {(console.error || console.log)(reason);}
        },
        retry: function() {
           try {
            var isFallback = false;
            if (this.retryCnt++ > this.timeout) {
                this.track("AV_M3", "&prbdres=nopos&sn=" + encodeURIComponent(location.href).slice(0, 400));
                return;
            }
            if (this.retryCnt == this.timeout && a.posFallbacks) {
                a.posSelectors = a.posFallbacks;
                isFallback = true;
                this.track("AV_M3", "&prbdres=fallbackpos&sn=" + encodeURIComponent(location.href).slice(0, 400));
            }
            var that = this;
            setTimeout(function() {
                that.position(isFallback);
            }, 250);} catch (reason) {(console.error || console.log)(reason);}
        },
        create: function(p, n) {
            try {var d1 = document.createElement("div");
            if(a.scriptId) {
		        d1.className = a.scriptId;
		    }
            d1.style.width = "100%";
            d1.style.margin = "0 auto";
            d1.style.maxWidth = "" + a.maxWidth + "px";
            var d2 = document.createElement("div");
            d2.id = "aniBox";
            var d3 = document.createElement("div");
            d3.id = a.position;
            if (p === this.doc || p === this.doc.head)
                p = this.doc.body;
            if (n) {
                p.insertBefore(d1, n);
            } else {
                p.appendChild(d1);
            }
            a.positionDiv = d3;
            a.refDiv = p;
            d1.appendChild(d2);
            d2.appendChild(d3);
            this.postCreate(d1);} catch (reason) {(console.error || console.log)(reason);}
        },
        position: function(isFallback) {
            try {
            function validateElements(els) {
                var ret = [];
                if (els) {
                    els.forEach(function(el) {
                        if(el && el.clientWidth > (a.minElWidth || 170)) {
                            ret.push(el);
                        }
                    });
                }
                return ret;
            }
            function findSelectors(selectors) {
                if (selectors && selectors.length > 0 && selectors.forEach) {
                    for (var i = 0; i < selectors.length; i++) {
                        var s = selectors[i];
                        try {
                            var q = st.doc.querySelectorAll(s.selector);
                            if (q.length > 0) {
                                return {
                                    q: isFallback ? validateElements(q): q,
                                    counter: s.counter
                                };
                            }
                        } catch (ex) {}
                    }
                }
                return {
                    q: []
                }
            }
            var p = this.doc;
            var isScp = false;
            var positionApiKey = "av_positionApi_" + a.scriptId;
            try {
                if ((!a.positionApi || typeof this.win[a.positionApi] !== "function")
                    && typeof top[positionApiKey] === "function") {
                    a.positionApi = positionApiKey;
                }
            } catch (ex) {}
            if (a.positionApi && typeof this.win[a.positionApi] === "function") {
                try {
                    p = this.win[a.positionApi](a, st);
                } catch (ex) {}
                if (!p) {
                    this.retry();
                    return;
                }
                if (a.posType != "in") {
                    n = p;
                    p = p.parentNode;
                }
            }
            if (a.posSelector || a.posSelectors) {
                try {
                    var sel1 = a.posSelector ? [{
                        selector: a.posSelector,
                        counter: a.posCounter
                    }] : []
                    var sel = findSelectors(sel1.concat(a.posSelectors || []));
                    var q = sel.q;
                    var l = 0;
                    if (sel.counter > 0) {
                        l = sel.counter - 1;
                    }
                    p = q[l] || q[q.length - 1];
                } catch (e) {
                    this.track("AV_M3", "&prbdres=badpos&sn=" + encodeURIComponent(location.href).slice(0, 400));
                    return;
                }
                if (!p) {
                    this.retry();
                    return;
                }
            }
            if (a.posId) {
                p = this.doc.getElementById(a.posId);
                if (!p) {
                    this.retry();
                    return;
                }
            }
            if (a.posTag) {
                var c = a.posTag.split("#");
                if (c && c.length == 2) {
                    var e = p.getElementsByTagName(c[0]);
                    if (e.length == 0) {
                        this.retry();
                        return;
                    }
                    p = e[Math.min(c[1] - 1, e.length - 1)];
                }
            }
            if (a.posClass) {
                var c = a.posClass.split("#");
                var e = 1;
                if (c.length == 2) {
                    e = c[1];
                }
                var f = p.getElementsByClassName(c[0]);
                if (f.length > 0) {
                    p = f[Math.min(e - 1, f.length - 1)];
                }
                if (!p) {
                    this.retry();
                    return;
                }
            }
            if (a.posDfp1x1 && window.frameElement) {
                n = window.frameElement.parentNode.parentNode;
                p = n.parentNode;
                if ((frameElement.clientHeight > 5 || document.body.clientHeight > 5) && !a.nohideIframe) {
                    frameElement.style.height = "0px";
                }
                if (a.posType == "after") {
                    n = n.nextElementSibling;
                }
            }
            var n;
            if (p === this.doc) {
                n = this.findScript();
                if (n) {
                    p = n.parentNode;
                }
            }
            if (p === this.doc.head) {
                n = null;
                p = this.doc;
            }
            if (a.posType && a.posType !== "in" && !n) {
                if (a.posType === "after" && p.nextElementSibling) {
                    n = p.nextElementSibling;
                } else {
                    n = null;
                }
                p = p.parentNode;
            }
            if (p) {
                if (!p.av_setpos) {
                    p.av_setpos = {};
                }
                if (!p.av_setpos[a.position]) {
                    p.av_setpos[a.position] = true;
                    a.position += "-" + Date.now();
                    this.create(p, n);
                    this.load(a.playerVersion);
                } else {
                    this.track("AV_M3", "&prbdres=duppos&sn=" + encodeURIComponent(location.href).slice(0, 400));
                }
            }} catch (reason) {(console.error || console.log)(reason);}
        },
        fetchContent: function(callback) {
           try {		if (a.content && (a.content.cmsId && a.content.cmsType)) {
			a.content.contentFeed = "https://" + (a.cmsFeedDomain || "feed.avplayer.com") + "/backend/get?cmsType=" + a.content.cmsType + "&id=" + a.content.cmsId + "&AV_TAGID=" + this.config.tagId + "&pid=" + this.config.adConfig.publisherId + "&cid=" + this.config.adConfig.channelId + "&AV_TEMPID=" + this.config.templateId;
			if (a.content.firstVideoId) {
				a.content.contentFeed += "&firstVideoId=" + a.content.firstVideoId;
			}
			if (a.content.cmsSyndicationId) {
				a.content.contentFeed += "&syndicationId=" + a.content.cmsSyndicationId;
			}
		}
		var match = /AV_PUBLISHERID=([^&]+)/.exec(this.config.adConfig.ref1 || location.search);
		if (match && match[1]) {
			a.content.contentFeed += "&AV_PUBLISHERID=" + match[1];
		}
		if (a.content.contentFeed) {
			var xhr = new XMLHttpRequest();
			xhr.open("GET", a.content.contentFeed, true);
			xhr.onload = function () {
				xhr.onload = null;
				try {
					var json = JSON.parse(xhr.responseText);
					if (json && json.playlist) {
						if (json.playlist[0]) {
							json.playlist[0].title = 'ข่าวแนะนำ';
						}
						a.content.contents = json.playlist;
					}
				} catch (e) {
				}
				callback();
			};
			xhr.send();
		} else {
			callback();
		}
} catch (reason) {(console.error || console.log)(reason);}
        },
        load: function(playerVersion) {
            try {var that = this;
            var baseJsUrl = "https://player.avplayer.com/script/" + (playerVersion >= 8 ? "8.3" : "2") + "/v/";
            var loadCounter = 0;
            var errorCounter = 0;
            function checkIfLoad() {
                if (++loadCounter > 1) {
                    that.postLoadAsync(function(){
                        that.init(playerVersion);
                    });
                }
            }
            function checkIfError() {
                if (++errorCounter < 2) {
                    fetchScript(a.baseJsUrl || baseJsUrl);
                } else if (errorCounter < 4) {
                    fetchScript(baseJsUrl);
                } else if (errorCounter < 16) {
                    setTimeout(function() {
                        fetchScript(baseJsUrl);
                    }, 5000);
                }
            }
            function fetchScript(baseJsUrl) {
                var scp = that.doc.createElement("script");
                var rand = Math.floor(Math.random() * 100) + 1;
                if((rand < 5) && (playerVersion >= 8)){
                   baseJsUrl += "ab5/";
                }
                scp.src = baseJsUrl + "avcplayer.js";
                scp.onload = function() {
                    scp.onload = null;
                    checkIfLoad();
                };
                scp.onerror = function() {
                    scp.onerror = null;
                    that.doc.body.removeChild(scp);
                    checkIfError();
                };
                scp.async = true;
                that.doc.body.appendChild(scp);
            }
            this.fetchContent(checkIfLoad);
            fetchScript(a.baseJsUrl || baseJsUrl);} catch (reason) {(console.error || console.log)(reason);}
        },
        postStart: function(p) {
            try {} catch (reason) {(console.error || console.log)(reason);}
        },
        getAttr: function() {
            try {if (a.scriptId) {
                var s = this.findScript();
                if (s) {
                    for (var i = 0, t = s.attributes; i < s.attributes.length; i++) {
                        if (t[i].nodeName && t[i].nodeName.indexOf("data-") == 0) {
                            var n = t[i].nodeName.replace(/^data-/, "").replace(/[-_]+?(\w)/g, function (_, letter) { return letter.toUpperCase(); }).split(".");
                            var lastProp = n.pop();
                            try {
                                var innerConfig = n.reduce(function (a, prop) { return a[prop]; }, a);
                                innerConfig[lastProp] = t[i].nodeValue;
                            } catch(e) {
                            }
                        }
                    }
                    if (s.src) {
                        var p = s.src.indexOf("?");
                        if (p > 10) {
                            var r = (s.src.substring(p + 1, s.src.length));
                            a.adConfig.ref1 = (a.adConfig.ref1 || "") + "&" + (r || "");
                        }
                    }
                }
            }} catch (reason) {(console.error || console.log)(reason);}
        },
        start: function(player) {
            try {this.p = player;
            if (this.pbjs && this.pbjs.preparePlayer) {
               this.pbjs.preparePlayer(player, st);
            }
            if(a.playerApi && typeof this.win[a.playerApi] === "function" ) {
                try{
                    this.win[a.playerApi](a, player);
                } catch(ex){}
            }
            player.nextContent();
            this.postStart(player);} catch (reason) {(console.error || console.log)(reason);}
        },
        preRun: function() {
            try {		config.readMoreButton = Object.assign(config.readMoreButton || {}, {
			label: 'อ่านต่อ'
		});
		config.stayButton = Object.assign(config.stayButton || {}, {
			text: 'Stay'
		});
		config.autoSkip = Object.assign(config.autoSkip || {}, {
			text: 'Skip'
		});
} catch (reason) {(console.error || console.log)(reason);}
        },
        run: function() {
            try {this.config = a = config = this.getConfig();
            this.a = a;
            this.getAttr();
            function generateUuid () {
                return 'xxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, function(c) {
                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                    return v.toString(16);
                });
            }
            if (a.isSessionIdEnabled) {
                a.sessionID = generateUuid();
            }
            this.preRun();
            this.findWin();
            if (!this.doc.body) {
                this.doc.addEventListener("DOMContentLoaded", function() {
                    st.run();
                });
                if (this.bodyRetry > 0) {
                    setTimeout(function(){
                        st.run()
                    }, 250);
                    this.domRetry--;
                }
                return;
            }
            if (a.configApi && typeof this.win[a.configApi] === "function") {
                try {
                    this.win[a.configApi](a);
                } catch (ex) {
                }
            }
            if (this.unique() && !this.loaded) {
                this.loaded = true;
                this.track("playerLoaded", this.playerLoadedTrackParams());
                this.retryCnt = 0;
                this.timeout = a.posTimeout || 40;
                this.pbjs = window.aniviewRenderer && window.aniviewRenderer.units && window.aniviewRenderer.units[a.scriptId];
                if (this.pbjs && this.pbjs.prepareConfig) {
                    this.pbjs.prepareConfig(a, st);
                }
                if(a.playerDelay > 0) {
                    setTimeout(function(){
                        st.position();
                    }, a.playerDelay * 1000);
                } else {
                   st.position();
                }
            }} catch (reason) {(console.error || console.log)(reason);}
        },
        init: function(playerVersion) {
            try {var that = this;
                this.getAttr();
                var isNewPlayer = playerVersion >= 8;
                var playerApiName = isNewPlayer ? "avContentPlayer" : "_avcp";
                function initPlayer(playerApi, reason) {
                    if (!playerApi) {
                        if (reason) {
                            throw reason;
                        }
                        throw new Error('The player API was not found');
                    }
                    return playerApi.createPlayer(a)
                        .then(function (playerClass) {
                            that.start(new playerClass(a));
                        })
                }
                function findPlayerApi(playerApiName) {
                    var apiClass;
                    var fallbackApiClass;
                    try {
                        if (that.win[playerApiName]) {
                            apiClass = that.win[playerApiName];
                        } else if (window[playerApiName]) {
                            apiClass = window[playerApiName];
                        } else {
                            apiClass = top[playerApiName];
                        }
                    } catch(exp) {
                        try {
                            fallbackApiClass = window[playerApiName];
                        } catch(exp) {}
                    }
                    return { apiClass: apiClass, fallbackApiClass: fallbackApiClass };
                }
                var playerApi = findPlayerApi(playerApiName);
                var playerApiClass = playerApi.apiClass;
                var playerApiFallbackClass = playerApi.fallbackApiClass;
                if (isNewPlayer && !playerApiClass && !playerApiFallbackClass) {
                    playerApi = findPlayerApi("_avcp");
                    playerApiClass = playerApi.apiClass;
                    playerApiFallbackClass = playerApi.fallbackApiClass;
                    isNewPlayer = false;
                    if (!playerApiClass && !playerApiFallbackClass) {
                        a.baseJsUrl = null;
                        that.load(7);
                        return;
                    }
                }
                if (isNewPlayer) {
                    try {
                        initPlayer(playerApiClass).catch(function (reason) {
                            initPlayer(playerApiFallbackClass, reason);
                        });
                    } catch (reason) {
                        initPlayer(playerApiFallbackClass, reason);
                    }
                } else {
                    var player;
                    try {
                        player = new playerApiClass(a);
                    } catch (e) {
                        player = new playerApiFallbackClass(a);
                    }
                    that.start(player);
                }} catch (reason) {(console.error || console.log)(reason);}
        },
        postFeed: function() {
            try {} catch (reason) {(console.error || console.log)(reason);}
        },
        postLoadAsync: function(callback) {
            try {var done = false;
			if (!config.waitForScroll) {
				callback();
				return;
			}
			var checkPos = function() {
				if (st.win.scrollY > 5) {
					return true;
				}
			};
			var scrollListener = function() {
				if (done) {
					return;
				}
				if (checkPos()) {
					st.win.removeEventListener("scroll", scrollListener);
					callback();
					done = true;
				}
			};
			if (st.win !== top || checkPos()) {
				callback();
			} else {
				st.win.addEventListener("scroll", scrollListener);
			}} catch (reason) {(console.error || console.log)(reason);}
        },
        findScript: function() {
            try {        if (!this.scriptEl) {
            a.scriptApi = a.scriptApi || window["av_scriptApi_" + a.scriptId];
            if (a.scriptApi && typeof a.scriptApi === "function") {
                var scriptEl = a.scriptApi();
                if (scriptEl != null) {
                    this.scriptEl = scriptEl;
                }
            }
        }
        if (!this.scriptEl) {
            this.scriptEl = document.getElementById(a.scriptId);
        }
        return this.scriptEl;
    } catch (reason) {(console.error || console.log)(reason);}
        },
        domRetry: 20
    };
    st.run();
})(window);
